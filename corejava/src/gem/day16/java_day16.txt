网络编程（综合）
1、类：InetAddress：IP地址
2、URLEncode.encode("字符串","编码集")  编码
   URLDecode.decode("字符串","编码集")  解码

3、URL URLConnection HttpURLConnection
  HTTP协议，GET|POST方法
  HttpURLConnection提交HTTP请求（WEB开发中的）
  理解URL: 协议：//IP地址：端口/资源名  (重要）

4、基于Socket编程 (重点)
  1）是一个抽象层，隐藏了TCP/IP协议的细节
  2）基于Client/Server

服务端代码：Socket
   ServerSocket server = ...
   Socket socket = server.accept();//阻塞方法

客户端代码：Socket
   Socket socket = new Socket("服务器"，端口);

Socket对象之后，传输数据
  发送数据： socket.getOutputStream  输出流，写
  接收数据： socket.getInputStream   输入流，读
文本（字符串）:
  字节输出流： ==》 字符输出流  PrintStream (PrintWriter) [处理流]
      out = new PrintStream(socket.getOutputStream)
      out.println("要发送的信息");
      out.flush(); //刷新
  字节输入流： ==>  字符输入流（读到一行数据） ==》 带缓存的字符输入流
      in = new BufferedReader(new InputStreamReader(
		socket.getInputStream()));
      //读
      String s = in.readLine();


示例：基于Socket的、命令行的、群发（服务器-多客户端）聊天工具 
1)Server：发送一条消息给户端
  Client:接收这条消息，并在控制台显示

2)Client:发送一条消息 ==》Server
  Server：接收这条消息，并在控制台显示
3)加循环，Client发送的消息从键盘上读
   输入quit时，退出
4)服务器端为每个客户创建一个线程

5)客户端发送的第一条消息是这个客户的姓名，还可以是命令行参数

5、UDP编程
  TCP  UDP区别
UDP: Client/Server
服务器端创建DatagramSocket：
   new DatagramSocket(int port)  指定端口号
   接收"信"  receive("信")
   DatagramPacket(byte[] buff,int len)

客户端创建DatagramSocket：
   new DatagramSocket(int port,InetAddress ip);
   发送"信": send("信")

   DatagramPacket对象："短信"
      new DatagramPacket(byte[] buff,int len,InetAddress add,int port)
   


