1、包装类:每个基本数据类型对应一个类（引用类型）
  1）byte short long float double boolean
     Byte Short Long Float Double Boolean
     int => Integer  char => Character
  2) 基本数据类型与引用类型自动转换：装箱、拆箱
         Integer i = 100;
  3) 常见方法：
       parseInt(Long...)("字符串") 字符串===》数值

2、final： 不变，终极
  变量：常量，值不能改变，
      如果引用类型变量，不能改变是地址，指向内容可改变
  方法：该方法不能被重写
  类：  该类不能被继承（不能被子类化）
     
3、abstract：抽象
  类：抽象类，不能实例化，new 抽象类名(error)
  方法：没有实现 没有{}
 抽象类与抽象方法关系：
   1）一个类中有一个抽象方法，哪这个必须定义为抽象类
   2）一个抽象类中可以有抽象方法，也可以有非抽象方法
继承(设计):
  接口(Servlet)   抽象类（AbstractServlt）  具体类(MyServlet)

4、接口
1）含义：接口=规范=协议
2）定义：interface
3) 接口体中有：
     静态常量、public abstract方法、定义接口
4）类与接口的关系：类实现接口，
    implements,含义：实现接口中的方法
   一个类可以实现多个不同的接口，一个接口可以被多个类实现
5)接口与接口的关系：
   一个接口可以继承多个接口（多继承）
6）接口与抽象类

总结：类的定义与方的定义

[public|默认] [final|abstract]   class 类名 extends 父类 implements I1,I2,I3  {
[public|默认|protected|private] [static][final|abstract] 
    返回类型 方法名（参数列表） 抛出异常 {
}
｝


OOA OOD 面向对象的方析与设计
   UML：

5、多态：
含义：一个引用类型的变量，可以指向不同的对象（实例）,
   调用同一方法，呈现不同的行为（实现不同）
//Shape定义为抽象类，Circle、Rect是它的子类
//Shape定义为接口，Circle、Rect是实现Shape接口的类
 s:编译期类型，能调什么方法
   运行期类型，实际调用什么方法
Shape s = new Circle();
      s.area();
      s = new Rect(); 
      s.area();

基础：继承 + 方法重写 + 动态绑定

形式：1）简单多态
      2）数组
         Shape[] ss = {new Cirlce(),new Rect(),...}
      3）方法参数:形参  实参
         draw(Shape shape)
        obj.draw(园对象)
        obj.draw(长方型对象)


          add(int x,int y) 调用时 add(10,20);
        多态: watch(父类的类型或接口名  变量名)
              watch(Animal animal)
            调用时：  watch(子类对象的变量)
                     Animal a = new Dog();
                      watch(a);
                     a = new Dolphin()
                      wacth(a);
                     a.show();
      4）返回类型
             Shape getShape() {
                 return 园对象
                 return 长方型对象
              }

好处：1）可扩展性 2)可维护性

人（People）在观看(watch)动物的表演？


6、面向接口(抽象类)的编程：
1）:声明一个变量时，变量的类型为一个接口
    接口名 变量名;
2）：声明一个数组时，数组元素的类型为一个接口
    接口名[] 变量名;
3）：定义一个方法时，方法的参数的类型声明为一个接口
    void method(接口名 变量名)
4）：定义一个方法时，方法的返回类型声明为一个接口
    接口名  method()


